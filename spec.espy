let dict = require std:dictionary;
let client = import client;

// () creates an expression scope, which evalutes to its final expression
if x > 10 (
	let y = (
		let a = 0;
		for i in 0..10 (
			a += a;
		)
		a
	)

	return x * y;
)
// This is useful for precedence:
let x = (1 + 2) * 3;

// A tuple may be created by returning multiple values from a scope using a comma
let tuple = ( 1, "2", 3.0 );
// Indexing may be performed using `.`
tuple.0
// And destructuring:
let ( one, two, three ) = tuple;

// A colon may be used to specify the tuple's type:
let tuple: ( u32, string, f32 ) = ( 1, "2", 3.0 );
let two: string = tuple.1

// In a similar vein, a named tuple may be created by naming the fields of a tuple.
let struct = ( one = 1, two = "2", three = 3.0 )
// or
let struct: ( one = u32, two = string, three = f32 ) = ( 1, "2", 3.0 )
// Tuples containing the same types in the same order
// may be treated as the same type by functions that accept them,
// even if the names of their fields differ.

tile_at_coord = |x = u32, y = u32| map[y + x * width];

tile_at_coord ( x = 1, y = 2 )
tile_at_coord ( 3, 4 )
tile_at_coord ( foo = 5, bar = 6 )
let tuple = ( 7, 8 )
tile_at_coord tuple

// This flexibility is useful, but sometimes *inflexibility* is even more useful.
// For this, use the struct:

let Coord = struct ( x = u32, y = u32 ) {
	// Within this block the struct defines its interface,
	// returning a named tuple of the functions it exposes.
	// These functions are the only functions able to access its inner fields,
	// via the `self` parameter or `Self` type.

	// The `Self` seen below is put in a block to make clear that it is the function's return type.
	// The tuple `( x, y )` is coerced into the `Self` type by the function.
	// You could, however, write this function as `fn x, y Self x, y`
	new = |x, y| -> Self ( x, y ),
	tile = |self| map[y + x * width],
	// impl <op> can be used to implement certain special behaviors, like making Coord act like a function in this case.
	impl fn = |self| self.tile,
}

// `Coord` names only the type of the structure, similar to `u32` and `string`.
// To instantiate it, call the provided `new` function.

let coord = Coord.new ( 1, 2 );
let tile = coord.tile();
// or using the fn impl.
let tile = coord();

// An iterator is any struct with `impl for` in its interface. 
let Iter = struct ( start = u32, end = u32 ) {
	new = |start = u32, end = u32| -> Self ( start, end ),
	// This is the "next" function. It should return an Option wrapping any other type.
	// You may call it directly using `iterator.next`.
	impl for = |self| -> option (
		if self.start < self.end (
			let index = self.start;
			self.start = index + 1;
			Some index
		) else (
			None
		)
	)
};

for i in range => iterator.map |x| x + 1 {
	print i
}

// `for` covers `loop` and `while` too.
// an `interator.foreach` function could work,
// but `break` and `continue` are useful. (what about goto?)

let i = 0;
for () in iterator.forever {
	i = i + 1;
	if i > 10 {
		break;
	}
}

let i = 0;
for () in iterator.while || i < 10 {
	i = i + 1;
}

// `for` could cover `if` as well, but not `else`.
